<?php

namespace alizephp;

use Monolog\Logger;
use Monolog\Handler\StreamHandler;

require '../vendor/autoload.php';
require __DIR__.'/AlizePHPException.php';

/**
 * 
 * AlizePHP is a php wrapper for Alize and LIA_RAL, an open source platform for biometrics authentification.
 * This class aims to abstract AlizePHP's commands and files, providing a per-user set of methods,
 * and allowing developers to extract audio features and i-vectors with ease.
 * 
 * Alize and LIA_RAL are not part of this package and they must be downloaded and compiled in your
 * machine. Once compiled, place the libraries and binaries generated in bin/ directory.
 * It is STRONGLY advised to read documentation from Alize package as well as study the tutorials
 * in order to understand what this package is doing and how to adapt it to your project.
 * Anyway, a rough set of steps to create a user information in a sistem is to sequentially execute
 * the following commands:
 * 
 * 1 - extractFeatures()
 * 2 - normaliseEnergy()
 * 3 - detectEnergy()
 * 4 - normaliseFeatures()
 * 5 - ivExtractor()
 * 
 * Every method needs the output of the preceding one stored in your directory structure in order 
 * to properly work (you'll receive an AlizePHPException if that is not the case). Once the i-vector
 * generated by ivExtractor() is present, you can use ivTest to verify if two users are the same
 * person.
 * 
 * A set of default configuration files and settings is also provided in cfg/ directory. These
 * files have been created by Anthony Larcher (alarcher - at- i2r.a-star.edu.sg) as part of his
 * Alize tutorials and, as he states, "The author does not give ANY waranty about the performance
 * and the usability".
 * 
 * You can change file extensions and directories to create your own directory structure.
 * This may be useful if you want to use the files generated by Alize with another software.
 * Settings file can be found in cfg/alizephp_conf.php.
 * 
 * Alize has been created by:
 * A. Larcher, J.-F. Bonastre, B. Fauve, K.A. Lee, C. Levy, H. Li, J.S.D. Mason, J.-Y Parfait, 
 * "ALIZE 3.0 - Open Source Toolkit for State-of-the-Art Speaker Recognition," 
 * in Annual Conference of the International Speech Communication Association (Interspeech), 2013
 * 
 * Alize website: http://alize.univ-avignon.fr/index_en.html
 * Alize SVN: http://alize.univ-avignon.fr/svn/ALIZE/trunk/
 * LIA_RAL SVN: http://alize.univ-avignon.fr/svn/LIA_RAL/trunk/
 * Alize documentation (including Tutorials): http://alize.univ-avignon.fr/doc_en.html
 * 
 * @author HÃ©ctor Pablos
 *
 */
class AlizePHP {
	
	/**
	 * @var string Speaker id. If it's a number, it will be cast to a string.
	 */
	private $speaker;
	
	/**
	 * @var string Path to original audio file sample from the speaker
	 */
	private $original_audio_file;
	
	/**
	 * @var array Array to hold every configuration option, as directory paths and extensions
	 */
	private $conf;
	
	private $log;
	
	/**
	 * Returns speaker Id as a string
	 * @return string
	 */
	public function getSpeaker() {
		return $this->speaker;
	}
	
	/**
	 * Returs full path to the original audio file provided in the 
	 * creation of the object
	 * @return string
	 */
	public function getOriginalAudioFile() {
		return $this->original_audio_file;
	}
	
	/**
	 * Loads configuration options into conf array
	 */
	private function getConfig() {
		$this->conf = require __DIR__.'/../cfg/alizephp_conf.php';
	}
	
	/**
	 * Executes a given command and returns stdout, stderr and return value
	 * 
	 * @param string $comm Command to execute
	 * @throws AlizePHPException
	 * @return string[] Array wit stdout, stderr and return value of the command, in
	 * indexes 0, 1 and 2 each
	 */
	private function executeCommand($comm) {
		$descriptorspec = array(
				0 => array("pipe", "r"),  // stdin
				1 => array("pipe", "w"),  // stdout
				2 => array("pipe", "w"),  // stderr
		);
		
		$process = proc_open($comm, $descriptorspec, $pipes);
		
		$outvalues = array();
		
		// $outvalues[1] is stdout
		$outvalues[1] = stream_get_contents($pipes[1]);
		fclose($pipes[1]);
		
		// $outvalues[2] is stderr
		$outvalues[2] = stream_get_contents($pipes[2]);
		fclose($pipes[2]);
		
		// $outvalues[0] is return value
		$outvalues[0] = (string)proc_close($process);
		
		if ($outvalues[0] != 0) throw new AlizePHPException($outvalues[2], $outvalues[0]);
		
		return $outvalues;
		
	}
	
	/**
	 * Returns path of bin directory, where binaries and libraries should be placed.
	 * Bin path value can be set in "base_bin_dir" option of config file.
	 * @return string Base bin path
	 */
	private function getBinPath() {
		return $this->conf['base_bin_dir'];
	}
	
	/**
	 * Returns path of data directory, where pcm audio, features and labels should be placed.
	 * Data path value can be set in "base_data_dir" option of config file.
	 * @return string Base data dir
	 */
	private function getBaseDataDir() {
		return $this->conf['base_data_dir'];
	}
	
	/**
	 * Returns path of configuration directory, where Alize and AlizePHP config files should be placed.
	 * Config path value can be set in "base_conf_dir" option of config file.
	 * @return string Base conf dir
	 */
	private function getBaseConfigDir() {
		return $this->conf['base_conf_dir'];
	}
	
	/**
	 * Returns path of pcm audio files, where audio files of each speaker in pcm format should be placed.
	 * Pcm audio files directory is located inside base data directory.
	 * Audio files path value can be set in "audio_dir" option of config file.
	 * @return string
	 */
	public function getAudioFilePath() {
		return $this->getBaseDataDir() . $this->conf['audio_dir'];
	}
	
	/**
	 * Returns path of feature files, where raw, energy and normalised features should be placed.
	 * Feature files dir is located inside base data dir.
	 * Features files path value can be set in "audio_dir" option of config file.
	 * @return string
	 */
	public function getFeauresFilePath() {
		return $this->getBaseDataDir() . $this->conf['features_dir'] ;
	}
	
	/**
	 * Returns path of label files, where label files with energy detections should be placed.
	 * Label files dir is located inside base data dir.
	 * Label files path value can be set in "labels_dir" option of config file.
	 * @return string
	 */
	public function getLabelsFilePath() {
		return $this->getBaseDataDir() . $this->conf['labels_dir'] ;
	}
	
	/**
	 * Returns path of mixture files.
	 * Mixture files path value can be set in "mixture_files_path" option of config file.
	 * @return string
	 */
	public function getMixtureFilesPath() {
		return $this->conf['mixture_files_path'];
	}
	
	/**
	 * Returns path of matrix files.
	 * Matrix files path value can be set in "matrix_files_path" option of config file.
	 * @return string
	 */
	public function getMatrixFilesPath() {
		return $this->conf['matrix_files_path'];
	}
	
	/**
	 * Returns path of vector files.
	 * Vector files path value can be set in "svector_files_path" option of config file.
	 * @return string
	 */
	public function getSVectorFilesPath() {
		return $this->conf['svector_files_path'];
	}
	
	/**
	 * Returns path of i-vector files.
	 * I-Vector files path value can be set in "ivector_files_path" option of config file.
	 * @return string
	 */
	public function getIVectorFilesPath() {
		return $this->conf['ivector_files_path'];
	}

	/**
	 * Returns path of ndx files.
	 * Ndx files path value can be set in "ndx_dir" option of config file.
	 * @return string
	 */
	public function getNdxFilesPath() {
		return $this->conf['ndx_dir'];
	}
	
	/**
	 * Returns path of test result files.
	 * Test result files path value can be set in "results_dir" option of config file.
	 * @return string
	 */
	public function getResultFilesPath() {
		return $this->conf['results_dir'];
	}
	
	/**
	 * Returns full path to IvExtractor file. Filename will be IvExtractor_(username)
	 * and extension can be set in extensions -> ndx_files option
	 * @return string
	 */
	public function getIvExtractorFileName() {
		return $this->getNdxFilesPath()."IvExtractor_".$this->getSpeaker().$this->conf['extensions']['ndx_files'];
	}
	
	/**
	 * Returns full path to audio file. Filename will be username
	 * and extension can be set in extensions -> audio option
	 * @return string
	 */
	public function getAudioFileName() {
		return $this->getAudioFilePath().$this->getSpeaker().$this->conf['extensions']['audio'];
	}
	
	/**
	 * Returns full path to raw features file. Filename will be username
	 * and extension can be set in extensions -> raw_features option
	 * @return string
	 */
	public function getRawFeaturesFileName() {
		return $this->getFeauresFilePath().$this->getSpeaker().$this->conf['extensions']['raw_features'];
	}
	
	/**
	 * Returns full path to energy file. Filename will be username
	 * and extension can be set in extensions -> normalised_energy option
	 * @return string
	 */
	public function getNormalisedEnergyFileName() {
		return $this->getFeauresFilePath().$this->getSpeaker().$this->conf['extensions']['normalised_energy'];
	}
	
	/**
	 * Returns full path to normalised features file. Filename will be username
	 * and extension can be set in extensions -> normalised_features option
	 * @return string
	 */
	public function getNormalisedFeaturesFileName() {
		return $this->getFeauresFilePath().$this->getSpeaker().$this->conf['extensions']['normalised_features'];
	}
	
	/**
	 * Returns full path to label file. Filename will be username
	 * and extension can be set in extensions -> label option
	 * @return string
	 */
	public function getLabelFileName() {
		return $this->getLabelsFilePath().$this->getSpeaker().$this->conf['extensions']['label'];
	}
	
	/**
	 * Returns full path to vector file. Filename will be username
	 * and extension can be set in extensions -> svector option
	 * @return string
	 */
	public function getSVectorFileName(){
		return $this->getSVectorFilesPath().$this->getSpeaker().$this->conf['extensions']['svector'];
	}
	
	/**
	 * Returns full path to i-vector file. Filename will be username
	 * and extension can be set in extensions -> ivector option
	 * @return string
	 */
	public function getIVectorFileName(){
		return $this->getIVectorFilesPath().$this->getSpeaker().$this->conf['extensions']['ivector'];
	}
	
	/**
	 * Returns full path to train model file. Filename will be trainModel_(speaker)
	 * and extension can be set in extensions -> ndx_files option
	 * @return string
	 */
	public function getTrainModelFileName($speaker = null) {
		if ($speaker === null) {
			$speaker = $this->getSpeaker();
		}
		return $this->getNdxFilesPath()."trainModel_".$speaker.$this->conf['extensions']['ndx_files'];
	}
	
	/**
	 * Returns full path to model file. Filename will be username
	 * and extension can be set in extensions -> mixture option
	 * @return string
	 */
	public function getModelFileName() {
		return $this->getMixtureFilesPath().$this->getSpeaker().$this->conf['extensions']['mixture'];
	}
	
	/**
	 * Returns full path to user ndx file. Filename will be ivTest_plda_target-seg_(speaker)
	 * and extension can be set in extensions -> ndx_files option
	 * @return string
	 */
	public function getNdxFileName() {
		return $this->getNdxFilesPath()."ivTest_plda_target-seg_".$this->getSpeaker().$this->conf['extensions']['ndx_files'];
	}
	
	/**
	 * Returns full path to Background ndx file
	 * @return string
	 */
	private function getBackgroundNdxFileName() {
		return $this->getNdxFilesPath()."ivNorm".$this->conf['extensions']['ndx_files'];
	}
	
	/**
	 * Returns full path to ivTest score file. Filename will be scores_(speaker)
	 * and extension will be txt
	 * @return string
	 */
	public function getResultsFileName() {
		return $this->getResultFilesPath()."scores_".$this->getSpeaker().".txt";
	}
	
	/**
	 * Creates an AlizePHP object
	 * @param string $speaker User id of the speaker
	 * @param string $audio_file_path Filepath to an audio file sample of user
	 * @throws AlizePHPException
	 */
	public function __construct($speaker, $audio_file_path) {
		$this->getConfig();
		if (!$speaker) Throw new AlizePHPException("Speaker must be a nonempty value.");
		if (!file_exists($audio_file_path))
			throw new AlizePHPException("Original audio file missing. Path: ".$audio_file_path);
		$this->speaker = (string)$speaker;
		$this->original_audio_file = $audio_file_path;
		$this->log = new Logger("alizephp");
		$this->log->pushHandler(new StreamHandler($this->conf['log_path']."alizephp.log", Logger::INFO));
	}
	
	/**
	 * 
	 * Creates raw features file from audio provided in constructor and stores audio in alizephp
	 * directory structure.
	 * If a param string for the sfbcep command is not provided, the default of
	 * "-m -k 0.97 -p19 -n 24 -r 22 -e -D -A -F PCM16" will be used.
	 * @param string $param_string OPTIONAL Parameter string for sfbcep command 
	 * @throws AlizePHPException
	 * @return boolean
	 * @see AlizePHP::getAudioFileName() for the path of the audio file copied
	 * @see AlizePHP::getRawFeaturesFileName() for the path of the raw features filename
	 */
	public function extractFeatures ($param_string = null) {
		if (!file_exists($this->getOriginalAudioFile()))
			throw new AlizePHPException("Original audio file missing. Path: ".$audio_file_path);
		file_put_contents($this->getAudioFileName(), file_get_contents($this->getOriginalAudioFile()));
		if ($param_string === null) {
			$param_string = "-m -k 0.97 -p19 -n 24 -r 22 -e -D -A -F PCM16 -f 44100";
		}
		$audio_file = $this->getAudioFileName();
		$feaures_file = $this->getRawFeaturesFileName();
		$command = $this->getBinPath() . "sfbcep " . $param_string . " ".$audio_file." ".$feaures_file;
		$outvalues = $this->executeCommand($command);
		if (!file_exists($this->getRawFeaturesFileName()))
			throw new AlizePHPException($outvalues[1],$command,$outvalues[2],$outvalues[0]);
		$this->log->addInfo($outvalues[1]);
		return true;
	}
	
	/**
	 * 
	 * Creates normalised features file from raw features file created in extractFeatures method.
	 * If a path to a config file is not provided "cfg_files"->"normalise_features" option in
	 * settings file sets the path of the config file that will be used.
	 * @param string $cfg_file_path OPTIONAL Path to a config file for Alize's NormFeat command
	 * @return boolean
	 * @throws AlizePHPException
	 * @see AlizePHP::extractFeatures() For the method to extract features needed
	 * @see AlizePHP::getNormalisedEnergyFileName() For the path of the normalised features
	 * file and generate this method's input
	 * generated by this method
	 */
	public function normaliseEnergy($cfg_file_path = null) {
		if (!file_exists($this->getRawFeaturesFileName()))
			throw new AlizePHPException("Raw features file missing. Path: ".$this->getRawFeaturesFileName());
		if ($cfg_file_path === null) {
			$cfg_file_path = $this->getBaseConfigDir() . $this->conf['cfg_files']['normalise_energy'];
		}
		$command = $this->getBinPath()."NormFeat --config $cfg_file_path --inputFeatureFilename ".$this->getSpeaker().
					" --featureFilesPath ".$this->getFeauresFilePath().
					" --loadFeatureFileExtension ".$this->conf['extensions']['raw_features'].
					" --saveFeatureFileExtension ".$this->conf['extensions']['normalised_energy'];
		$outvalues = $this->executeCommand($command);
		if (!file_exists($this->getNormalisedEnergyFileName()))
			throw new AlizePHPException($outvalues[1],$command,$outvalues[2],$outvalues[0]);
		$this->log->addInfo($outvalues[1]);
		return true;
	}
	
	/**
	 * Creates label file from normalised energy file created in normaliseEnergy method.
	 * If a path to a config file is not provided "cfg_files"->"detect_energy" option in
	 * settings file sets the path of the config file that will be used.
	 * @param string $cfg_file_path OPTIONAL Path to a config file for Alize's EnergyDetector command
	 * @throws AlizePHPException
	 * @return boolean
	 * @see AlizePHP::getLabelFileName() For the path of the label file
	 * @see AlizePHP::normaliseEnergy() For the method to normalyse energy and generate this method's input
	 */
	public function detectEnergy($cfg_file_path = null) {
		if (!file_exists($this->getNormalisedEnergyFileName()))
			throw new AlizePHPException("Normalised energy file missing. Path: ".$this->getRawFeaturesFileName());
		if ($cfg_file_path === null) {
			$cfg_file_path = $this->getBaseConfigDir() . $this->conf['cfg_files']['detect_energy'];
		}
		if (file_exists($this->getLabelFileName())) {
			unlink($this->getLabelFileName());
		}
		$command = $this->getBinPath()."EnergyDetector --config $cfg_file_path --inputFeatureFilename ".$this->getSpeaker().
					" --featureFilesPath ".$this->getFeauresFilePath()." --labelFilesPath ".$this->getLabelsFilePath().
					" --loadFeatureFileExtension ".$this->conf['extensions']['normalised_energy'].
					" --saveLabelFileExtension ".$this->conf['extensions']['label'];
		$outvalues = $this->executeCommand($command);
		if (!file_exists($this->getLabelFileName()))
			throw new AlizePHPException($outvalues[1],$command,$outvalues[2],$outvalues[0]);
		$this->log->addInfo($outvalues[1]);
		return true;
	}
	
	/**
	 * Creates a features file from raw features and label files created in extractFeatures
	 * and detectEnergy methods.
	 * If a path to a config file is not provided "cfg_files"->"normalise_features" option in
	 * settings file sets the path of the config file that will be used.
	 * @param string $cfg_file_path OPTIONAL Path to a config file for Alize's NormFeat command
	 * @throws AlizePHPException
	 * @return boolean
	 * @see AlizePHP::extractFeatures() For the method to extract features and generate this method's input
	 * @see AlizePHP::detectEnergy() For the method to extract labels and generate this method's input
	 * @see AlizePHP::getNormalisedFeaturesFileName() For the path of the features file
	 */
	public function normaliseFeatures($cfg_file_path = null) {
		if (!file_exists($this->getLabelFileName()))
			throw new AlizePHPException("Labels file missing. Path: ".$this->getLabelFileName());
		if (!file_exists($this->getRawFeaturesFileName()))
			throw new AlizePHPException("Raw features file missing. Path: ".$this->getRawFeaturesFileName());
		if ($cfg_file_path === null) {
			$cfg_file_path = $this->getBaseConfigDir() . $this->conf['cfg_files']['normalise_features'];
		}
		$command = $this->getBinPath()."NormFeat --config $cfg_file_path --inputFeatureFilename ".$this->getSpeaker().
					" --featureFilesPath ".$this->getFeauresFilePath()." --labelFilesPath ".$this->getLabelsFilePath().
					" --loadFeatureFileExtension ".$this->conf['extensions']['raw_features'].
					" --saveFeatureFileExtension ".$this->conf['extensions']['normalised_features'];
		$outvalues = $this->executeCommand($command);
		if (!file_exists($this->getNormalisedFeaturesFileName()))
			throw new AlizePHPException($outvalues[1],$command,$outvalues[2],$outvalues[0]);
		$this->log->addInfo($outvalues[1]);
		return true;
	}
	
	/**
	 * Creates the train model file needed to extract a user's i-vector
	 */
	private function createTrainModelFile() {
		$trainWorldFile = fopen($this->getTrainModelFileName(), "w");
		fputs($trainWorldFile, $this->getSpeaker()." ".$this->getSpeaker());
		fclose($trainWorldFile);
		if (!file_exists($this->getTrainModelFileName()))
			throw new AlizePHPException("Unable to create train model file. PATH: ".$this->getTrainModelFileName());
	}
	
	/**
	 * 
	 * @param string $cfg_file_path OPTIONAL Path to a config file for Alize's TrainTarget command
	 * @throws AlizePHPException
	 * @return boolean
	 * @see AlizePHP::normaliseFeatures() For the method to get normalised features and
	 * generate this method's input.
	 * @see AlizePHP::detectEnergy() For the method to get the label file and
	 * generate this method's input.
	 * @see AlizePHP::getModelFileName() For the path of the vector file
	 * @see AlizePHP::hasModel() To test if a vector for this user has been created using this method
	 */
	public function trainTarget($cfg_file_path = null) {
		if (!file_exists($this->getLabelFileName()))
			throw new AlizePHPException("Labels file missing. Path: ".$this->getLabelFileName());
		if (!file_exists($this->getNormalisedFeaturesFileName()))
			throw new AlizePHPException("Features file missing. Path: ".$this->getFeauresFilePath());
		
		if ($cfg_file_path === null) {
			$cfg_file_path = $this->getBaseConfigDir() . $this->conf['cfg_files']['train_target'];
		}
		
		if (!file_exists($this->getTrainModelFileName())) {
			$this->createTrainModelFile();
		}
		if (!file_exists($this->getTrainModelFileName()))
			throw new AlizePHPException("Unable to create train model. Path: ".$this->getTrainModelFileName());

		$command = $this->getBinPath()."TrainTarget --config $cfg_file_path --mixtureFilesPath ".$this->getMixtureFilesPath().
		" --matrixFilesPath ".$this->getMatrixFilesPath()." --vectorFilesPath ".$this->getSVectorFilesPath().
		" --featureFilesPath ".$this->getFeauresFilePath()." --labelFilesPath ".$this->getLabelsFilePath().
		" --targetIdList ".$this->getTrainModelFileName($this->getSpeaker()).
		" --loadFeatureFileExtension ".$this->conf['extensions']['normalised_features'].
		" --loadMixtureFileExtension ".$this->conf['extensions']['mixture'].
		" --saveMixtureFileExtension ".$this->conf['extensions']['mixture'].
		" --loadMatrixFilesExtension ".$this->conf['extensions']['matrix'].
		" --saveMatrixFilesExtension ".$this->conf['extensions']['matrix'].
		" --vectorFilesEtension ".$this->conf['extensions']['svector'];
			
		$outvalues = $this->executeCommand($command);
		if (!$this->hasModel($this->getSpeaker()))
			throw new AlizePHPException($outvalues[1],$command,$outvalues[2],$outvalues[0]);
		
		$this->log->addInfo($outvalues[1]);
		return true;
		
	}
	
	/**
	 * Test if the speaker's object is the same person as speaker with ID of $speaker_to_compare_to.
	 * Speaker object calling this function must have its normalised features generated and stored,
	 * while $speaker_to_compare_to must have its model.
	 * If a path to a config file is not provided, "cfg_files"->"compute_test" option in
	 * settings file sets the path of the config file that will be used.
	 * @param string $speaker_to_compare_to ID of the speaker compared agains this object's one
	 * @param string $cfg_file_path OPTIONAL Path to a config file for Alize's computeTest command
	 * @throws AlizePHPException
	 * @return boolean true if both speakers are the same person, false if not
	 */
	public function computeTest($speaker_to_compare_to, $cfg_file_path = null) {
		if (!file_exists($this->getNormalisedFeaturesFileName()))
			throw new AlizePHPException("Missing parameters for speaker ".$this->getSpeaker().
					". Path: ".$this->getNormalisedFeaturesFileName());
		if (!$this->hasModel($speaker_to_compare_to))
			throw new AlizePHPException("There is not enough information about $speaker_to_compare_to".
					", the model for this user must be generated before testing his identity");
		
		if (!file_exists($this->getNdxFileName())) {
			$this->createNdxFile($speaker_to_compare_to);
		}
		if (!file_exists($this->getNdxFileName()))
			throw new AlizePHPException("Unable to create ndx test file. Path: ".$this->getNdxFileName());
		
		if ($cfg_file_path === null) {
			$cfg_file_path = $this->getBaseConfigDir() . $this->conf['cfg_files']['compute_test'];
		}
		
		$command = $this->getBinPath()."ComputeTest --config $cfg_file_path ".
					" --targetIdList ".$this->getTrainModelFileName($speaker_to_compare_to).
					" --featureFilesPath ".$this->getFeauresFilePath().
					" --labelFilesPath ".$this->getLabelsFilePath().
					" --mixtureFilesPath ".$this->getMixtureFilesPath().
					" --ndxFilename ".$this->getNdxFileName().
					" --loadMixtureFileExtension ".$this->conf['extensions']['mixture'].
					" --loadFeatureFileExtension ".$this->conf['extensions']['normalised_features'].
					" --outputFilename ".$this->getResultsFileName();
		$outvalues = $this->executeCommand($command);
		if (!file_exists($this->getResultsFileName()))
			throw new AlizePHPException($outvalues[1],$command,$outvalues[2],$outvalues[0]);

		$this->log->addInfo($outvalues[1]);
		return true;
	}
	
	/**
	 * Creates the iv extractor file needed to extract a user's i-vector
	 */
	private function createIvExtractorFile() {
		$ivExtractFile = fopen($this->getIvExtractorFileName(), "w");
		fputs($ivExtractFile, $this->getSpeaker()." ".$this->getSpeaker());
		fclose($ivExtractFile);
		if (!file_exists($this->getIvExtractorFileName()))
			throw new AlizePHPException("Unable to create iv extractor file. PATH: ".$this->getIvExtractorFileName());
	}
	
	/**
	 * Creates an i-vector representing the user's voice features. It needs the ouptu generated by
	 * the NormaliseFeatures and detectEnergy methods, as well as mixture (model) and matrix files,
	 * generated using ALIZE internal tools with multiple samples.
	 * If a path to a config file is not provided "cfg_files"->"iv_extractor" option in
	 * settings file sets the path of the config file that will be used.
	 * @param string $cfg_file_path OPTIONAL Path to a config file for Alize's IvExtractor command
	 * @throws AlizePHPException
	 * @return boolean
	 * @see AlizePHP::normaliseFeatures() For the method to get normalised features and
	 * generate this method's input.
	 * @see AlizePHP::detectEnergy() For the method to get the label file and
	 * generate this method's input.
	 * @see AlizePHP::getIVectorFileName() For the path of the vector file
	 * @see AlizePHP::hasVector() To test if a vector for this user has been created using this method
	 */
	public function ivExtractor($cfg_file_path = null) {
		if (!file_exists($this->getLabelFileName()))
			throw new AlizePHPException("Labels file missing. Path: ".$this->getLabelFileName());
		if (!file_exists($this->getNormalisedFeaturesFileName()))
			throw new AlizePHPException("Features file missing. Path: ".$this->getFeauresFilePath());
		
		if ($cfg_file_path === null) {
			$cfg_file_path = $this->getBaseConfigDir() . $this->conf['cfg_files']['iv_extractor'];
		}
		
		if (!file_exists($this->getIvExtractorFileName())) {
			$this->createIvExtractorFile();
		}
		if (!file_exists($this->getIvExtractorFileName()))
			throw new AlizePHPException("Unable to create ivExtractor file. Path: ".$this->getIvExtractorFileName());
		
		$command = $this->getBinPath()."IvExtractor --config $cfg_file_path --mixtureFilesPath ".$this->getMixtureFilesPath().
					" --matrixFilesPath ".$this->getMatrixFilesPath()." --saveVectorFilesPath ".$this->getIVectorFilesPath().
					" --featureFilesPath ".$this->getFeauresFilePath()." --labelFilesPath ".$this->getLabelsFilePath().
					" --targetIdList ".$this->getIvExtractorFileName().
					" --loadFeatureFileExtension ".$this->conf['extensions']['normalised_features'].
					" --loadMixtureFileExtension ".$this->conf['extensions']['mixture'].
					" --saveMixtureFileExtension ".$this->conf['extensions']['mixture'].
					" --loadMatrixFilesExtension ".$this->conf['extensions']['matrix'].
					" --saveMatrixFilesExtension ".$this->conf['extensions']['matrix'].
					" --vectorFilesEtension ".$this->conf['extensions']['ivector'].
					" --outputFileName ".$this->getResultsFileName();
		
		if (!file_exists($this->getTrainModelFileName())) {
			$this->createTrainModelFile();
		}
		if (!file_exists($this->getTrainModelFileName()))
			throw new AlizePHPException("Unable to create train model. Path: ".$this->getTrainModelFileName());
			
		$outvalues = $this->executeCommand($command);
		if (!$this->hasIVector($this->getSpeaker()))
			throw new AlizePHPException($outvalues[1],$command,$outvalues[2],$outvalues[0]);

		$this->log->addInfo($outvalues[1]);
		return true;
	}
	
	/**
	 * Creates an ndx file with comparison id cases. In our approach, it simply outputs
	 * actual user the user to compare to. In i-vector based methods it's always 'spk01',
	 * while in GMM based methods a parameter with the user to compare to model name must be given
	 */
	private function createNdxFile($model_name = null) {
		if ($model_name === null) {
			$model_name = "spk01";
		}
		$ndxFile = fopen($this->getNdxFileName(), "w");
		fputs($ndxFile, $this->getSpeaker(). " $model_name");
		fclose($ndxFile);
	}
	

	/**
	 * Test if the speaker's object is the same person as speaker with ID of $speaker_to_compare_to.
	 * Buth speakers must have their i-vectors created and stored in the directory structure.
	 * If a path to a config file is not provided "cfg_files"->"iv_extractor" option in
	 * settings file sets the path of the config file that will be used.
	 * @param string $speaker_to_compare_to ID of the speaker compared agains this objet's one
	 * @param string $cfg_file_path OPTIONAL Path to a config file for Alize's IvTest command
	 * @throws AlizePHPException
	 * @return boolean true if botk speakers are the same person, false if not
	 */
	public function ivTest($speaker_to_compare_to, $cfg_file_path = null) {
		if (!$this->hasIVector($this->getSpeaker()))
			throw new AlizePHPException("I-Vector file missing. Path: ".$this->getIVectorFileName());
		if (!$this->getTrainModelFileName($speaker_to_compare_to))
			throw new AlizePHPException("There is not enough information about $speaker_to_compare_to".
					", i-vector for this user must be extracted before testing his identity");
		
		if ($cfg_file_path === null) {
			$cfg_file_path = $this->getBaseConfigDir() . $this->conf['cfg_files']['iv_test'];
		}
		
		if (!file_exists($this->getNdxFileName())) {
			$this->createNdxFile();
		}
		if (!file_exists($this->getNdxFileName()))
			throw new AlizePHPException("Unable to create ndx test file. Path: ".$this->getNdxFileName());
		
		$command = $this->getBinPath()."IvTest --config $cfg_file_path --loadVectorFilesPath ".$this->getIVectorFilesPath().
					" --testVectorFilesPath ".$this->getIVectorFilesPath()." --matrixFilesPath ".$this->getMatrixFilesPath().
					" --targetIdList ".$this->getTrainModelFileName($speaker_to_compare_to).
					" --ndxFilename ".$this->getNdxFileName().
					" --loadMatrixFilesExtension ".$this->conf['extensions']['matrix'].
					" --saveMatrixFilesExtension ".$this->conf['extensions']['matrix'].
					" --loadVectorFilesExtension ".$this->conf['extensions']['ivector'].
					" --outputFilename ".$this->getResultsFileName().
					" --backgroundNdxFilename ".$this->getBackgroundNdxFileName();
		$outvalues = $this->executeCommand($command);
		if (!file_exists($this->getResultsFileName()))
			throw new AlizePHPException($outvalues[1],$command,$outvalues[2],$outvalues[0]);
		
		//Results file is read in order to return test success
		$results = explode(" ", file_get_contents($this->getResultsFileName()));
		
		$test_succes = false;
		if ($results[2] == "1") {
			$test_succes = true;
		}

		$this->log->addInfo($outvalues[1]);
		return $test_succes;
	}
	
	/**
	 * Checks if a file exists, and if so, deletes it
	 * @param string $file_path Path to the file to delete
	 */
	private function deletefeFile($file_path) {
		if (file_exists($file_path)) {
			unlink($file_path);
		}
	}
	
	/**
	 * Deletes every existing file associated to a user. It would be equivalent to cascade delete
	 * a user from a database.
	 * @return bool true if the method ends correctly, false if not
	 */
	public function cleanUserFiles() {
		$this->deletefeFile($this->getAudioFileName());
		$this->deletefeFile($this->getRawFeaturesFileName());
		$this->deletefeFile($this->getNormalisedEnergyFileName());
		$this->deletefeFile($this->getNormalisedFeaturesFileName());
		$this->deletefeFile($this->getSVectorFileName());
		$this->deletefeFile($this->getIVectorFileName());
		$this->deletefeFile($this->getIvExtractorFileName());
		$this->deletefeFile($this->getTrainModelFileName());
		$this->deletefeFile($this->getNdxFileName());
		//$this->deletefeFile($this->getResultsFileName());
		return true;
	}
	
	/**
	 * Checks if a user's i-vector is present, so this user's identity can be tested against another
	 * @param string $user Id of the user whose i-vector is searched
	 * @throws AlizePHPException
	 * @return boolean true if the i-vector for the user has been calculated, false otherwise
	 */
	public static function hasIVector($user) {
		if (!$user)
			throw new AlizePHPException("A user Id must be provided in order to test i-vector existance.");
		$conf = require __DIR__.'/../cfg/alizephp_conf.php';
		$vector_file_path = $conf['ivector_files_path'].$user.$conf['extensions']['ivector'];
		return file_exists($vector_file_path);
	}
	
	/**
	 * Checks if a user's model is present, so this user's identity can be tested against another
	 * @param string $user Id of the user whose model is searched for
	 * @throws AlizePHPException
	 * @return boolean true if the model for the user has been calculated, false otherwise
	 */
	public static function hasModel($user) {
		if (!$user)
			throw new AlizePHPException("A user Id must be provided in order to test model existance.");
		$conf = require __DIR__.'/../cfg/alizephp_conf.php';
		$vector_file_path = $conf['mixture_files_path'].$user.$conf['extensions']['mixture'];
		return file_exists($vector_file_path);
	}
	
}
